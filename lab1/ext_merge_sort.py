
import os
import tempfile
import heapq
import time
import sys
import shutil

chunk_size = 25
counter=0
allTempFiles=[]

# Read chunk data - 25 lines from file, sort the data and stored sorted data in temp file
def createChunkOutputFile(file_name):           
    unsortedfile = open(file_name, 'r')
    chunk_lines = []

    for num in unsortedfile:
        chunk_lines.append(num)
        #print("******")
        #print(num)

        if len(chunk_lines) >= chunk_size:
            chunk_lines = sorted(chunk_lines, key=lambda number: int(number.strip()))
            tempHandler = tempfile.NamedTemporaryFile(mode='at+', dir='temp/', delete=False)
            tempHandler.writelines(chunk_lines)
            tempHandler.seek(0)
            allTempFiles.append(tempHandler)
            chunk_lines = []
            time.sleep(1)              
            # tempHandler.close()    

# Create temp folder for each execution and delete existing one
def creatTempFolder():  
    current_directory = os.getcwd()
    final_directory = os.path.join(current_directory, 'temp')
    if not os.path.exists(final_directory):
        os.makedirs(final_directory)
    else:
        shutil.rmtree(final_directory)
        os.makedirs(final_directory)

#cCreate reate output folder
def creatOutputFolder():
    current_directory = os.getcwd()
    final_directory = os.path.join(current_directory, 'output')
    if not os.path.exists(final_directory):
        os.makedirs(final_directory)

#Perform k-merge sort using heapq.merge on the all temp files generated by createChunkOutputFile() and write output to sorted.txt file
def mergeSort():
        #print(len(allTempFiles))
        merger_Generator = (map(int, tempFileHandler) for tempFileHandler in allTempFiles) 
        sortedData = heapq.merge(
            *merger_Generator) 
        with open('output/sorted.txt', 'wt+') as out:
            finalsortedData = map('{}\n'.format, sortedData)
            #for num in finalsortedData:
              #print(num)
            out.writelines(finalsortedData)
            out.close()
 
 
creatTempFolder()
creatOutputFolder()

for i in range(10):     #for all 10 unsorted files call createChunkOutputFile()
    temp = "input/unsorted_"+str(i+1)+".txt"
    createChunkOutputFile(temp)

mergeSort()

