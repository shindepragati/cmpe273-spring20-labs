
import asyncio
import os
import tempfile
import heapq
import shutil


chunk_size = 25
counter = 0
allTempFiles = []
task = []

# Read chunk data - 25 lines from file, sort the data and stored sorted data in temp file
async def createChunkOutputFile(file_name):
    unsortedfile = open(file_name, 'r')
    chunk_lines = []

    for num in unsortedfile:
        chunk_lines.append(num)
        #print("******")
        #print(num)

        if len(chunk_lines) >= chunk_size:
            chunk_lines = sorted(chunk_lines, key=lambda number: int(number.strip()))
            tempHandler = tempfile.NamedTemporaryFile(mode='at+', dir='temp/', delete=False)
            tempHandler.writelines(chunk_lines)
            tempHandler.seek(0)
            allTempFiles.append(tempHandler)
            chunk_lines = []
            await asyncio.sleep(1)              #concurrently start other tasks
            # tempHandler.close()    

# Create temp folder for each execution and delete existing one
def creatTempFolder():
    current_directory = os.getcwd()
    final_directory = os.path.join(current_directory, 'temp')
    if not os.path.exists(final_directory):
        os.makedirs(final_directory)
    else:
        shutil.rmtree(final_directory)
        os.makedirs(final_directory)

#Create reate output folder
def creatOutputFolder():
    current_directory = os.getcwd()
    final_directory = os.path.join(current_directory, 'output')
    if not os.path.exists(final_directory):
        os.makedirs(final_directory)

#Perform k-merge sort using heapq.merge on the all temp files generated by createChunkOutputFile() and write output to sorted.txt file
def mergeSort():
        #print(len(allTempFiles))
        merger_Generator = (map(int, tempFileHandler) for tempFileHandler in allTempFiles) 
        sortedData = heapq.merge(
            *merger_Generator) 
        with open('output/sorted.txt', 'wt+') as out:
            finalsortedData = map('{}\n'.format, sortedData)
            #for num in finalsortedData:
              #print(num)
            out.writelines(finalsortedData)
            out.close()


creatTempFolder()
creatOutputFolder()
task = []

#loop = asyncio.get_event_loop()
#for i in range(10):
#    count=str(i+1)
#    temp = "input/unsorted_"+count+".txt"
#    task.append(loop.create_task(createChunkOutputFile(temp)))

#task.append(loop.create_task(mergeSort()))
#loop.run_until_complete(asyncio.wait(task))
#mergeSort()

#create task for each unsorted file to achive async functionlity
async def main():
    
    t1 = loop.create_task(createChunkOutputFile("input/unsorted_1.txt"))
    t2 = loop.create_task(createChunkOutputFile("input/unsorted_2.txt"))
    t3 = loop.create_task(createChunkOutputFile("input/unsorted_3.txt"))
    t4 = loop.create_task(createChunkOutputFile("input/unsorted_4.txt"))
    t5 = loop.create_task(createChunkOutputFile("input/unsorted_5.txt"))
    t6 = loop.create_task(createChunkOutputFile("input/unsorted_6.txt"))
    t7 = loop.create_task(createChunkOutputFile("input/unsorted_7.txt"))
    t8 = loop.create_task(createChunkOutputFile("input/unsorted_8.txt"))
    t9 = loop.create_task(createChunkOutputFile("input/unsorted_9.txt"))
    t10 = loop.create_task(createChunkOutputFile("input/unsorted_10.txt"))

    await asyncio.wait([t1, t2, t3, t4, t5, t6, t7, t8, t9, t10])   #wait until all tasks are complete
    #await asyncio.wait([t1, t2, t3])

    mergeSort()
    
if __name__ == "__main__":
    try:
        loop = asyncio.get_event_loop()
        loop.run_until_complete(main())         #ensures all tasks from main are completed
 
    except Exception as e:
        print(e)
    
    finally:
        loop.close()





